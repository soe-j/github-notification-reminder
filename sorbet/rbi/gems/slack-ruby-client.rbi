# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/slack-ruby-client/all/slack-ruby-client.rbi
#
# slack-ruby-client-0.14.2
module Slack
  def self.config; end
  def self.configure; end
end
class Slack::Logger < Logger
  def self.default; end
end
module Slack::Config
  def logger; end
  def logger=(arg0); end
  def reset; end
  def token; end
  def token=(arg0); end
  extend Slack::Config
end
module Slack::Messages
end
class Slack::Messages::Message < Hashie::Mash
  def log_built_in_message(*arg0); end
  def presence; end
  def to_s; end
end
module Slack::Messages::Formatting
  def self.unescape(message); end
end
module Slack::Web
  def self.config; end
  def self.configure; end
end
module Slack::Web::Config
  def ca_file; end
  def ca_file=(arg0); end
  def ca_path; end
  def ca_path=(arg0); end
  def default_max_retries; end
  def default_max_retries=(arg0); end
  def default_page_size; end
  def default_page_size=(arg0); end
  def endpoint; end
  def endpoint=(arg0); end
  def logger; end
  def logger=(arg0); end
  def open_timeout; end
  def open_timeout=(arg0); end
  def proxy; end
  def proxy=(arg0); end
  def reset; end
  def timeout; end
  def timeout=(arg0); end
  def token; end
  def token=(arg0); end
  def user_agent; end
  def user_agent=(arg0); end
  extend Slack::Web::Config
end
module Slack::Web::Api
end
module Slack::Web::Api::Errors
end
class Slack::Web::Api::Errors::SlackError < Faraday::Error
  def initialize(message, response = nil); end
  def response; end
end
class Slack::Web::Api::Errors::TooManyRequestsError < Faraday::Error
  def initialize(response); end
  def message; end
  def response; end
  def retry_after; end
end
module Slack::Web::Faraday
end
module Slack::Web::Faraday::Response
end
class Slack::Web::Faraday::Response::RaiseError < Faraday::Response::Middleware
  def on_complete(env); end
end
module Slack::Web::Faraday::Connection
  def connection; end
end
module Slack::Web::Faraday::Request
  def delete(path, options = nil); end
  def get(path, options = nil); end
  def post(path, options = nil); end
  def put(path, options = nil); end
  def request(method, path, options); end
end
module Slack::Web::Api::Mixins
end
module Slack::Web::Api::Mixins::Ids
  def id_for(key, name, prefix, list_method, not_found_error); end
end
module Slack::Web::Api::Mixins::Channels
  def channels_id(options = nil); end
  include Slack::Web::Api::Mixins::Ids
end
module Slack::Web::Api::Mixins::Users
  def users_id(options = nil); end
  include Slack::Web::Api::Mixins::Ids
end
module Slack::Web::Api::Mixins::Groups
  def groups_id(options = nil); end
  include Slack::Web::Api::Mixins::Ids
end
module Slack::Web::Api::Endpoints
  include Slack::Web::Api::Endpoints::Api
  include Slack::Web::Api::Endpoints::Apps
  include Slack::Web::Api::Endpoints::AppsPermissions
  include Slack::Web::Api::Endpoints::AppsPermissionsResources
  include Slack::Web::Api::Endpoints::AppsPermissionsScopes
  include Slack::Web::Api::Endpoints::AppsPermissionsUsers
  include Slack::Web::Api::Endpoints::Auth
  include Slack::Web::Api::Endpoints::Bots
  include Slack::Web::Api::Endpoints::Channels
  include Slack::Web::Api::Endpoints::Chat
  include Slack::Web::Api::Endpoints::ChatScheduledmessages
  include Slack::Web::Api::Endpoints::Conversations
  include Slack::Web::Api::Endpoints::Dialog
  include Slack::Web::Api::Endpoints::Dnd
  include Slack::Web::Api::Endpoints::Emoji
  include Slack::Web::Api::Endpoints::Files
  include Slack::Web::Api::Endpoints::FilesComments
  include Slack::Web::Api::Endpoints::Groups
  include Slack::Web::Api::Endpoints::Im
  include Slack::Web::Api::Endpoints::Migration
  include Slack::Web::Api::Endpoints::Mpim
  include Slack::Web::Api::Endpoints::Oauth
  include Slack::Web::Api::Endpoints::Pins
  include Slack::Web::Api::Endpoints::Reactions
  include Slack::Web::Api::Endpoints::Reminders
  include Slack::Web::Api::Endpoints::Rtm
  include Slack::Web::Api::Endpoints::Search
  include Slack::Web::Api::Endpoints::Stars
  include Slack::Web::Api::Endpoints::Team
  include Slack::Web::Api::Endpoints::TeamProfile
  include Slack::Web::Api::Endpoints::Usergroups
  include Slack::Web::Api::Endpoints::UsergroupsUsers
  include Slack::Web::Api::Endpoints::Users
  include Slack::Web::Api::Endpoints::UsersAdmin
  include Slack::Web::Api::Endpoints::UsersPrefs
  include Slack::Web::Api::Endpoints::UsersProfile
  include Slack::Web::Api::Mixins::Channels
  include Slack::Web::Api::Mixins::Groups
  include Slack::Web::Api::Mixins::Users
end
module Slack::Web::Api::Endpoints::Api
  def api_test(options = nil); end
end
module Slack::Web::Api::Endpoints::Apps
  def apps_uninstall(options = nil); end
end
module Slack::Web::Api::Endpoints::AppsPermissions
  def apps_permissions_info(options = nil); end
  def apps_permissions_request(options = nil); end
end
module Slack::Web::Api::Endpoints::AppsPermissionsResources
  def apps_permissions_resources_list(options = nil); end
end
module Slack::Web::Api::Endpoints::AppsPermissionsScopes
  def apps_permissions_scopes_list(options = nil); end
end
module Slack::Web::Api::Endpoints::AppsPermissionsUsers
  def apps_permissions_users_list(options = nil); end
  def apps_permissions_users_request(options = nil); end
end
module Slack::Web::Api::Endpoints::Auth
  def auth_revoke(options = nil); end
  def auth_test(options = nil); end
end
module Slack::Web::Api::Endpoints::Bots
  def bots_info(options = nil); end
end
module Slack::Web::Api::Endpoints::Channels
  def channels_archive(options = nil); end
  def channels_create(options = nil); end
  def channels_delete(options = nil); end
  def channels_history(options = nil); end
  def channels_info(options = nil); end
  def channels_invite(options = nil); end
  def channels_join(options = nil); end
  def channels_kick(options = nil); end
  def channels_leave(options = nil); end
  def channels_list(options = nil); end
  def channels_mark(options = nil); end
  def channels_rename(options = nil); end
  def channels_replies(options = nil); end
  def channels_setPurpose(options = nil); end
  def channels_setTopic(options = nil); end
  def channels_unarchive(options = nil); end
end
module Slack::Web::Api::Endpoints::Chat
  def chat_command(options = nil); end
  def chat_delete(options = nil); end
  def chat_deleteScheduledMessage(options = nil); end
  def chat_getPermalink(options = nil); end
  def chat_meMessage(options = nil); end
  def chat_postEphemeral(options = nil); end
  def chat_postMessage(options = nil); end
  def chat_scheduleMessage(options = nil); end
  def chat_unfurl(options = nil); end
  def chat_update(options = nil); end
end
module Slack::Web::Api::Endpoints::ChatScheduledmessages
  def chat_scheduledMessages_list(options = nil); end
end
module Slack::Web::Api::Endpoints::Conversations
  def conversations_archive(options = nil); end
  def conversations_close(options = nil); end
  def conversations_create(options = nil); end
  def conversations_history(options = nil); end
  def conversations_info(options = nil); end
  def conversations_invite(options = nil); end
  def conversations_join(options = nil); end
  def conversations_kick(options = nil); end
  def conversations_leave(options = nil); end
  def conversations_list(options = nil); end
  def conversations_members(options = nil); end
  def conversations_open(options = nil); end
  def conversations_rename(options = nil); end
  def conversations_replies(options = nil); end
  def conversations_setPurpose(options = nil); end
  def conversations_setTopic(options = nil); end
  def conversations_unarchive(options = nil); end
end
module Slack::Web::Api::Endpoints::Dialog
  def dialog_open(options = nil); end
end
module Slack::Web::Api::Endpoints::Dnd
  def dnd_endDnd(options = nil); end
  def dnd_endSnooze(options = nil); end
  def dnd_info(options = nil); end
  def dnd_setSnooze(options = nil); end
  def dnd_teamInfo(options = nil); end
end
module Slack::Web::Api::Endpoints::Emoji
  def emoji_list(options = nil); end
end
module Slack::Web::Api::Endpoints::Files
  def files_delete(options = nil); end
  def files_edit(options = nil); end
  def files_info(options = nil); end
  def files_list(options = nil); end
  def files_revokePublicURL(options = nil); end
  def files_share(options = nil); end
  def files_sharedPublicURL(options = nil); end
  def files_upload(options = nil); end
end
module Slack::Web::Api::Endpoints::FilesComments
  def files_comments_delete(options = nil); end
end
module Slack::Web::Api::Endpoints::Groups
  def groups_archive(options = nil); end
  def groups_create(options = nil); end
  def groups_createChild(options = nil); end
  def groups_history(options = nil); end
  def groups_info(options = nil); end
  def groups_invite(options = nil); end
  def groups_kick(options = nil); end
  def groups_leave(options = nil); end
  def groups_list(options = nil); end
  def groups_mark(options = nil); end
  def groups_open(options = nil); end
  def groups_rename(options = nil); end
  def groups_replies(options = nil); end
  def groups_setPurpose(options = nil); end
  def groups_setTopic(options = nil); end
  def groups_unarchive(options = nil); end
end
module Slack::Web::Api::Endpoints::Im
  def im_close(options = nil); end
  def im_history(options = nil); end
  def im_list(options = nil); end
  def im_mark(options = nil); end
  def im_open(options = nil); end
  def im_replies(options = nil); end
end
module Slack::Web::Api::Endpoints::Migration
  def migration_exchange(options = nil); end
end
module Slack::Web::Api::Endpoints::Mpim
  def mpim_close(options = nil); end
  def mpim_history(options = nil); end
  def mpim_list(options = nil); end
  def mpim_mark(options = nil); end
  def mpim_open(options = nil); end
  def mpim_replies(options = nil); end
end
module Slack::Web::Api::Endpoints::Oauth
  def oauth_access(options = nil); end
  def oauth_token(options = nil); end
end
module Slack::Web::Api::Endpoints::Pins
  def pins_add(options = nil); end
  def pins_list(options = nil); end
  def pins_remove(options = nil); end
end
module Slack::Web::Api::Endpoints::Reactions
  def reactions_add(options = nil); end
  def reactions_get(options = nil); end
  def reactions_list(options = nil); end
  def reactions_remove(options = nil); end
end
module Slack::Web::Api::Endpoints::Reminders
  def reminders_add(options = nil); end
  def reminders_complete(options = nil); end
  def reminders_delete(options = nil); end
  def reminders_info(options = nil); end
  def reminders_list(options = nil); end
end
module Slack::Web::Api::Endpoints::Rtm
  def rtm_connect(options = nil); end
  def rtm_start(options = nil); end
end
module Slack::Web::Api::Endpoints::Search
  def search_all(options = nil); end
  def search_files(options = nil); end
  def search_messages(options = nil); end
end
module Slack::Web::Api::Endpoints::Stars
  def stars_add(options = nil); end
  def stars_list(options = nil); end
  def stars_remove(options = nil); end
end
module Slack::Web::Api::Endpoints::Team
  def team_accessLogs(options = nil); end
  def team_billableInfo(options = nil); end
  def team_info(options = nil); end
  def team_integrationLogs(options = nil); end
end
module Slack::Web::Api::Endpoints::TeamProfile
  def team_profile_get(options = nil); end
end
module Slack::Web::Api::Endpoints::Usergroups
  def usergroups_create(options = nil); end
  def usergroups_disable(options = nil); end
  def usergroups_enable(options = nil); end
  def usergroups_list(options = nil); end
  def usergroups_update(options = nil); end
end
module Slack::Web::Api::Endpoints::UsergroupsUsers
  def usergroups_users_list(options = nil); end
  def usergroups_users_update(options = nil); end
end
module Slack::Web::Api::Endpoints::Users
  def users_conversations(options = nil); end
  def users_deletePhoto(options = nil); end
  def users_getPresence(options = nil); end
  def users_identity(options = nil); end
  def users_info(options = nil); end
  def users_list(options = nil); end
  def users_lookupByEmail(options = nil); end
  def users_setActive(options = nil); end
  def users_setPhoto(options = nil); end
  def users_setPresence(options = nil); end
end
module Slack::Web::Api::Endpoints::UsersAdmin
  def users_admin_invite(options = nil); end
  def users_admin_setInactive(options = nil); end
end
module Slack::Web::Api::Endpoints::UsersPrefs
  def users_prefs_get(options = nil); end
end
module Slack::Web::Api::Endpoints::UsersProfile
  def users_profile_get(options = nil); end
  def users_profile_set(options = nil); end
end
module Slack::Web::Api::Pagination
end
class Slack::Web::Api::Pagination::Cursor
  def client; end
  def each; end
  def initialize(client, verb, params = nil); end
  def max_retries; end
  def params; end
  def sleep_interval; end
  def verb; end
  include Enumerable
end
class Slack::Web::Client
  def ca_file; end
  def ca_file=(arg0); end
  def ca_path; end
  def ca_path=(arg0); end
  def default_max_retries; end
  def default_max_retries=(arg0); end
  def default_page_size; end
  def default_page_size=(arg0); end
  def endpoint; end
  def endpoint=(arg0); end
  def initialize(options = nil); end
  def logger; end
  def logger=(arg0); end
  def open_timeout; end
  def open_timeout=(arg0); end
  def proxy; end
  def proxy=(arg0); end
  def self.config; end
  def self.configure; end
  def timeout; end
  def timeout=(arg0); end
  def token; end
  def token=(arg0); end
  def user_agent; end
  def user_agent=(arg0); end
  include Slack::Web::Api::Endpoints
  include Slack::Web::Faraday::Connection
  include Slack::Web::Faraday::Request
end
module Slack::RealTime
  def self.config; end
  def self.configure; end
end
module Slack::RealTime::Concurrency
end
class Slack::RealTime::Socket
  def addr; end
  def close; end
  def connect!; end
  def connect; end
  def connected?; end
  def current_time; end
  def disconnect!; end
  def driver; end
  def initialize(url, options = nil); end
  def logger; end
  def options; end
  def options=(arg0); end
  def port; end
  def restart_async(_client, _url); end
  def secure?; end
  def send_data(message); end
  def start_async(_client); end
  def start_sync(client); end
  def time_since_last_message; end
  def url; end
  def url=(arg0); end
end
module Slack::RealTime::Api
end
module Slack::RealTime::Api::MessageId
  def next_id; end
end
module Slack::RealTime::Api::Ping
  def ping(options = nil); end
end
module Slack::RealTime::Api::Message
  def message(options = nil); end
end
module Slack::RealTime::Api::Typing
  def typing(options = nil); end
end
module Slack::RealTime::Models
end
class Slack::RealTime::Models::Base < Hashie::Mash
  def log_built_in_message(*arg0); end
  def presence; end
end
class Slack::RealTime::Models::User < Slack::RealTime::Models::Base
end
class Slack::RealTime::Models::Bot < Slack::RealTime::Models::Base
end
class Slack::RealTime::Models::Channel < Slack::RealTime::Models::Base
end
class Slack::RealTime::Models::Group < Slack::RealTime::Models::Base
end
class Slack::RealTime::Models::Team < Slack::RealTime::Models::Base
end
class Slack::RealTime::Models::Im < Slack::RealTime::Models::Base
end
module Slack::RealTime::Stores
end
class Slack::RealTime::Stores::Base
  def bots; end
  def bots=(arg0); end
  def channels; end
  def channels=(arg0); end
  def events; end
  def events=(val); end
  def events?; end
  def groups; end
  def groups=(arg0); end
  def ims; end
  def ims=(arg0); end
  def initialize(_attrs); end
  def self.events; end
  def self.events=(val); end
  def self.events?; end
  def self.on(event, &block); end
  def self; end
  def team; end
  def teams; end
  def teams=(arg0); end
  def users; end
  def users=(arg0); end
end
class Slack::RealTime::Stores::Starter < Slack::RealTime::Stores::Base
  def initialize(attrs); end
  def self.events; end
  def self; end
  def team; end
end
class Slack::RealTime::Stores::Store < Slack::RealTime::Stores::Base
  def initialize(attrs); end
  def self.events; end
  def self; end
  def team; end
end
class Slack::RealTime::Store < Slack::RealTime::Stores::Store
end
module Slack::RealTime::Config
  def concurrency; end
  def concurrency=(arg0); end
  def detect_concurrency; end
  def logger; end
  def logger=(arg0); end
  def reset; end
  def start_method; end
  def start_method=(arg0); end
  def start_options; end
  def start_options=(arg0); end
  def store_class; end
  def store_class=(arg0); end
  def token; end
  def token=(arg0); end
  def websocket_ping; end
  def websocket_ping=(arg0); end
  def websocket_proxy; end
  def websocket_proxy=(arg0); end
  extend Slack::RealTime::Config
end
class Slack::RealTime::Config::NoConcurrencyError < StandardError
end
class Slack::RealTime::Client
  def bots; end
  def build_socket; end
  def callback(event, type); end
  def callbacks; end
  def channels; end
  def close(_event); end
  def concurrency; end
  def concurrency=(arg0); end
  def dispatch(event); end
  def groups; end
  def ims; end
  def initialize(options = nil); end
  def keep_alive?; end
  def logger; end
  def logger=(arg0); end
  def on(type, &block); end
  def open(_event); end
  def restart_async; end
  def rtm_start_method; end
  def run_callbacks(type, data); end
  def run_handlers(type, data); end
  def run_loop; end
  def run_ping!; end
  def run_ping?; end
  def self.config; end
  def self.configure; end
  def self.events; end
  def self.events=(arg0); end
  def self; end
  def send_json(data); end
  def socket_class; end
  def socket_options; end
  def start!(&block); end
  def start_async(&block); end
  def start_method; end
  def start_method=(arg0); end
  def start_options; end
  def start_options=(arg0); end
  def started?; end
  def stop!; end
  def store; end
  def store=(arg0); end
  def store_class; end
  def store_class=(arg0); end
  def team; end
  def teams; end
  def token; end
  def token=(arg0); end
  def url; end
  def url=(arg0); end
  def users; end
  def web_client; end
  def web_client=(arg0); end
  def websocket_ping; end
  def websocket_ping=(arg0); end
  def websocket_proxy; end
  def websocket_proxy=(arg0); end
  include Slack::RealTime::Api::Message
  include Slack::RealTime::Api::MessageId
  include Slack::RealTime::Api::Ping
  include Slack::RealTime::Api::Typing
end
class Slack::RealTime::Client::ClientNotStartedError < StandardError
end
class Slack::RealTime::Client::ClientAlreadyStartedError < StandardError
end
module Slack::Events
  def self.config; end
  def self.configure; end
end
module Slack::Events::Config
  def reset; end
  def signature_expires_in; end
  def signature_expires_in=(arg0); end
  def signing_secret; end
  def signing_secret=(arg0); end
  extend Slack::Events::Config
end
class Slack::Events::Request
  def body; end
  def expired?; end
  def http_request; end
  def initialize(http_request, options = nil); end
  def signature; end
  def signature_expires_in; end
  def signing_secret; end
  def timestamp; end
  def valid?; end
  def verify!; end
  def version; end
end
class Slack::Events::Request::MissingSigningSecret < StandardError
end
class Slack::Events::Request::TimestampExpired < StandardError
end
class Slack::Events::Request::InvalidSignature < StandardError
end
